{"version":3,"file":"static/js/contacts-page.fd7d9429.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactFilter/ContactFilter.module.css?a140","components/ContactFilter/ContactFilter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactElList/ContactElList.module.css?e10d","components/ContactList/ContactElList/ContactElList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\",\"buttom\":\"ContactForm_buttom__ONkO3\"};","import { useState } from 'react';\nimport {\n  useAddContactMutation,\n  useFetchContactsQuery,\n} from 'services/contactsApi';\nimport { Notify } from 'notiflix';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const { data: contacts } = useFetchContactsQuery();\n  const [addContact] = useAddContactMutation();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    if (name === 'name') {\n      setName(value);\n    }\n\n    if (name === 'number') {\n      setNumber(value);\n    }\n\n    // switch (name) {\n    //     case 'name':\n    //         setName(value);\n    //         break;\n\n    //     case 'number':\n    //         setNumber(value);\n    //         break;\n\n    //     default:\n    //         return;\n    // }\n  };\n\n  const checkRepeatName = name => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n  };\n\n  const checkRepeatNumber = number => {\n    return contacts.find(contact => contact.number === number);\n  };\n\n  const checkValidNumber = number => {\n    return !/\\d{3}[-]\\d{2}[-]\\d{2}/g.test(number);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (checkRepeatName(name)) {\n      Notify.info(`🙄 This ${name} is already in contacts`);\n    } else if (checkRepeatNumber(number)) {\n      Notify.info(`🙄 This ${number} is already in contacts`);\n    } else if (checkValidNumber(number)) {\n      Notify.failure(`😔 Please, enter the correct number phone`);\n    } else {\n      addContact({ name, phone: number });\n    }\n\n    resetInput();\n  };\n\n  const resetInput = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label}>Name</label>\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={handleChange}\n      />\n\n      <label className={s.label}>Number</label>\n      <input\n        className={s.input}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleChange}\n      />\n\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"ContactFilter_label__qRVzC\",\"input\":\"ContactFilter_input__8mWOi\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contacts-actions';\nimport s from './ContactFilter.module.css';\n\nconst ContactFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter);\n\n  const handleChangeFilter = e =>\n    dispatch(filterContacts(e.currentTarget.value));\n\n  return (\n    <>\n      <label className={s.label}>Find contacts by name</label>\n\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChangeFilter}\n      />\n    </>\n  );\n};\n\nexport default ContactFilter;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ContactElList_wrapper__SXddH\",\"name\":\"ContactElList_name__HwZJL\",\"number\":\"ContactElList_number__7KL0i\",\"button\":\"ContactElList_button__QbzHB\"};","import PropTypes from 'prop-types';\nimport { useDeleteContactMutation } from 'services/contactsApi';\nimport s from './ContactElList.module.css';\n\nconst ContactElList = ({ id, name, number }) => {\n  const [deleteContact] = useDeleteContactMutation();\n\n  return (\n    <div className={s.wrapper}>\n      <p className={s.name}>{name}:</p>\n      <span className={s.number}>{number}</span>\n\n      <button\n        className={s.button}\n        type=\"button\"\n        onClick={() => deleteContact(id)}\n      >\n        Dellete\n      </button>\n    </div>\n  );\n};\n\nContactElList.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactElList;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\"};","import { useSelector } from 'react-redux';\nimport { useFetchContactsQuery } from 'services/contactsApi';\nimport ContactElList from './ContactElList';\nimport s from './ContactList.module.css';\n\nconst ContactList = () => {\n  const { data: contacts } = useFetchContactsQuery();\n  const filter = useSelector(state => state.filter);\n\n  const normalizeFilter = filter.toLowerCase();\n  const filteredContacts =\n    contacts &&\n    contacts.filter(({ name }) => name.toLowerCase().includes(normalizeFilter));\n\n  return (\n    <ul className={s.list}>\n      {contacts &&\n        filteredContacts.map(({ id, name, phone }) => (\n          <li className={s.item} key={id}>\n            <ContactElList id={id} name={name} number={phone} />\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ContactsPage_wrapper__HYOyv\",\"title\":\"ContactsPage_title__P3MkR\"};","import ContactForm from 'components/ContactForm';\nimport ContactFilter from 'components/ContactFilter';\nimport ContactList from 'components/ContactList';\nimport s from './ContactsPage.module.css';\n\nconst ContactsPage = () => {\n  return (\n    <div className={s.wrapper}>\n      <h1 className={s.title}>Phonebook</h1>\n      <ContactForm />\n\n      <h2 className={s.title}>Contacts</h2>\n      <ContactFilter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["useState","name","setName","number","setNumber","contacts","useFetchContactsQuery","data","useAddContactMutation","addContact","handleChange","e","currentTarget","value","resetInput","className","s","onSubmit","preventDefault","find","contact","toLowerCase","checkRepeatName","checkRepeatNumber","test","checkValidNumber","phone","Notify","type","pattern","title","required","onChange","dispatch","useDispatch","filter","useSelector","state","filterContacts","id","useDeleteContactMutation","deleteContact","onClick","normalizeFilter","filteredContacts","includes","map"],"sourceRoot":""}